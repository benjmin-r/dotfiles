" vim:ft=vim

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Misc
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" vim-kitty-navigator
"let g:kitty_navigator_no_mappings = 1
"
"nnoremap <silent> <C-h> :KittyNavigateLeft<cr>
"nnoremap <silent> <C-j> :KittyNavigateDown<cr>
"nnoremap <silent> <C-k> :KittyNavigateUp<cr>
"nnoremap <silent> <C-l> :KittyNavigateRight<cr>


" sonic pi
let g:sonic_pi_command = 'sonic-pi-tool.py'
let g:sonic_pi_check = 'check'
let g:sonic_pi_eval = 'eval-stdin'
let g:sonic_pi_stop = 'stop'
" Disabled due to lack of support
let g:sonic_pi_run = ''
let g:sonic_pi_logs = ''
let g:sonic_pi_record = ''

" deoplete autocomplete engine
let g:deoplete#enable_at_startup = 1

" Vimux
let g:VimuxUseNearest=1

" vroom - run ruby tests
let g:vroom_use_vimux=1
let g:vroom_map_keys=0
let g:vroom_use_colors=1
let g:vroom_write_all=1
let g:vroom_clear_screen=1

" rails minitest
set completefunc=syntaxcomplete#Complete

" indent guide plugin
let g:indent_guides_guide_size=1
let g:indent_guides_start_level=2
let g:indent_guides_enable_on_vim_startup=1

" omnicomplete
" only complete the longest common text of all matches (not complete first match)
set completeopt+=longest
set omnifunc=syntaxcomplete#Complete  " enable omnicomplete

" html5 plugin
let g:html5_event_handler_attributes_complete = 0
let g:html5_rdfa_attributes_complete = 0
let g:html5_microdata_attributes_complete = 0

au BufNewFile,BufRead *.tmpl :set ft=html " all my .tmpl files ARE html

" bufexplorer
let g:bufExplorerDisableDefaultKeyMapping=1

" gitgutter
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
highlight GitGutterAdd ctermfg=darkgreen
highlight GitGutterChange ctermfg=darkyellow
highlight GitGutterDelete ctermfg=darkred
highlight GitGutterChangeDelete ctermfg=darkyellow
highlight SignColumn ctermbg=black

" taglist
let g:tlist_scala_settings = 'scala;p:package;t:trait;c:class;o:object;m:def;l:var;C:val;T:type'
let Tlist_Show_One_File = 1

" NERDTree
let g:NERDTreeWinPos = "right"
let NERDTreeShowLineNumbers=1  " enable line numbers
let g:NERDTreeWinSize=50
autocmd FileType nerdtree setlocal relativenumber  " make sure relative line numbers are used
command! NERDTreeWindowRightPos let g:NERDTreeWinPos = "right"
command! NERDTreeWindowLeftPos let g:NERDTreeWinPos = "left"

" vim-ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" ALE Linter
let g:ale_lint_on_text_changed=0
let g:ale_lint_on_enter=0
let g:ale_lint_on_save=1
" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1
let g:ale_linters = { 'ruby': ['ruby'] }

" fzf
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" fzf window layout
let g:fzf_layout = { 'window': { 'width': 1.0, 'height': 0.6, 'relative': v:true, 'yoffset': 1.0 } }
let g:fzf_colors = { 'border': [ 'fg', 'Label'] }
