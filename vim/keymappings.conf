" vim:ft=vim

" example: edit macro `q` ... open the q register 
" :let @q='
" <Ctrl-r><Ctrl-r>q

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" fzf
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Search files across project
"nnoremap <C-p> :FZF<CR>  " force myself to use new mapping
nnoremap ' :FZF<CR>
" Search in list of open buffers
nnoremap <leader>be :Buffers<CR>
" Search in Tags of current project
nnoremap <leader>. :Tags<cr>
" Search in Tags of current buffer
nnoremap <leader>, :BTags<cr>
" Search in lines of current buffer
nnoremap <leader>/ :BLines<cr>
" search in result list of ag search result
nnoremap <leader>A :Ag 
" Search in commits for current repo
nnoremap <leader>C :Commits<CR>
" Search in commits for current Buffer
nnoremap <leader>bc :BCommits<CR>
" Search in Commands
nnoremap <leader>cc :Commands<CR>

nnoremap <silent> <leader>g :NV<CR>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" vim-i18n
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vmap <Leader>z :call I18nTranslateString()<CR>
vmap <Leader>dt :call I18nDisplayTranslation()<CR>
" convert current translation key into relative key by stripping first five words from translation key
" turns t('prod.task.index.key') into t('.key')
nmap <leader>za 0f'ld5w
" extract everything in between current single quotes
nmap <leader>zd f'<c-v>F' z
" Extract complete line, respecting current indentation
nmap <leader>zf H<c-v>Lh z
" Extract everything from current cursor until end of line
nmap <leader>zg <c-v>Lh z
" convert variable between next , and previous ( into variable inside a string interpolation
nmap <leader>zw f,h<c-v>F(lS"ysi"}i#jk


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" live coding
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" save & send buffer to sonic pi
"nmap <leader>e :w<CR>:silent !sonic-pi-tool eval-file %<CR>
"nmap <leader>e :w<CR>:VimuxRunCommand("sonic-pi-tool eval-file " . expand('%'))<CR>

" This needs the dermusikman/sonicpi.vim plugin
nmap <leader>e :w<CR>:SonicPiSendBuffer<CR>
nmap <leader>r :w<CR>:SonicPiSendBuffer<CR>

function! OpenTidal()
 call VimuxOpenRunner()
 call VimuxRunCommand("ghci -ghci-script ~/.dotfiles/Tidal.ghci")
endfunction


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Vimux
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
map <leader>vz :VimuxZoomRunner<CR>
map <leader>vi :VimuxInspectRunner<CR>
map <leader>vp :VimuxPromptCommand<CR>
map <leader>vr :VimuxRunLastCommand<CR>
map <leader>vl :VimuxRunLastCommand<CR>
map <leader>vc :VimuxRunCommand(GetCurrentTestRunner())<CR>
map <leader>ff :VimuxRunCommand(GetCurrentTestRunner() . ":" . line("."))<CR>

function! VimuxSlime()
 call VimuxSendText(@v)
 call VimuxSendKeys("Enter")
endfunction

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <leader>vs "vy :call VimuxSlime()<CR>

" Select current paragraph and send it to tmux
nmap <leader>vs vip<leader>vs<CR>


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" poor man's version of Vroom, for easy selection of testrunner
" maybe someday I'm gonna understand what Gary does in 
" https://github.com/garybernhardt/dotfiles/blob/4988ce12d0954f6f51f315a14c3988fc7aff5613/.vimrc#L378
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
let g:test_runner = 'rspec'
function! ToggleTestRunner()
  if !exists('g:test_runner')
    let g:test_runner = 'rspec'
  endif

  if g:test_runner ==? 'rspec'
    echo 'Setting Test Runner to minitest'
    let g:test_runner = 'minitest'
  elseif g:test_runner ==? 'minitest'
    echo 'Setting Test Runner to rspec'
    let g:test_runner = 'rspec'
  endif
endfunction

function! GetCurrentTestRunner()
  if !exists('g:test_runner')
    let g:test_runner = 'rspec'
  endif

  if g:test_runner ==? 'rspec'
    return "rspec " . expand("%")
  elseif g:test_runner ==? 'minitest'
    return "rails test " . expand("%")
  endif
endfunction


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Rails
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

map <leader>AS :AS<CR>
map <leader>AE :AE<CR>
map <leader>RS :RS<CR>
map <leader>RE :RE<CR>
vmap <Leader>dt :call I18nDisplayTranslation()<CR>


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Git stuff
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
map <leader>gs :Gstatus<CR>:call OpenCurrentAsNewTab()<CR>

" GitGutter related
map <leader>gg :GitGutterToggle<CR>
map <leader>gp :GitGutterPreviewHunk<CR>
map <leader>gr :GitGutterUndoHunk<CR>

command! -nargs=1 Silent
  \   execute 'silent !' . <q-args>
  \ | execute 'redraw!'
map <leader>ga :Silent Git add %<CR>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" ctags
" helpful keymappings are
" <c-]> ... jump to tag under cursor
" <c-t> ... jump to previous entry in tag stack
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
map <leader>rc :!run_ctags<Enter>


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" ALE
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nnoremap <C-m> :ALEPrevious<CR>
nnoremap <C-n> :ALENext<CR>
nnoremap <leader>At :ALEToggle<CR>


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Goyo
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nmap \p :Goyo<CR>


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Misc
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" uses qpkorr/vim-bufkill plugin
nnoremap <silent> <leader>bd :BD<cr>   " Close current buffer but keep window splits
" ... alternate command would be `bp|bd #` which switches to previous buffer
" before deleting the buffer of the 'alternate file' see https://stackoverflow.com/a/4468491
nnoremap <silent> <leader>Bd :bdelete<cr><c-w>_ " close current buffer and current window too

" better navigation with long wrapped lines. 
" Taken from https://stackoverflow.com/a/21000307
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

nmap <leader>E :e<cr>
nmap <Leader>z :redo<CR>
map <leader>k ysiw]eli()jk
map <leader>` ysiw`
inoremap jj <ESC>l
inoremap jk <ESC>l
inoremap <ESC> <nop>
nnoremap <leader>s :w<CR>
nnoremap <leader><leader> :w<CR>
nnoremap K <nop>
map E ea
map <leader>i2 :SetIndent2Spaces<CR>
map <leader>i4 :SetIndent4Spaces<CR>
map <leader>it :SetIndentTabs<CR>
"nnoremap <leader><space> :noh<cr>   " clear highlighted search results
noremap < <<
noremap > >>
noremap <leader>D VGdo<Esc>
nnoremap <leader>c za " toggle fold
vnoremap <leader>c za
map <leader>rn :set relativenumber<CR>
map <leader>wr  :set wrap!<CR>:set tw=80!<CR>
map <leader>wc  :!wc %<CR>
map <leader>wo  :!wc -w %<CR>
map H ^
map L $
map <leader>lo :lopen<cr>
map <leader>lc :cclose<cr>
nnoremap oi :q<CR>
nnoremap <leader>oi :wq<CR>

map <leader>ln :DontShowLineNumbers<cr>
map <leader>ll :ShowLineNumbers<cr>


" use j, k, $, 0 and ^ on display lines by holding down the command
vmap <D-j> gj
vmap <D-k> gk
vmap <D-4> g$
vmap <D-6> g^
vmap <D-0> g^
nmap <D-j> gj
nmap <D-k> gk
nmap <D-4> g$
nmap <D-6> g^
nmap <D-0> g^"

noremap <leader>H :spl ~/.dotfiles/vim/keymappings.conf<CR>

function! QuickFix_toggle()
    for i in range(1, winnr('$'))
        let bnum = winbufnr(i)
        if getbufvar(bnum, '&buftype') == 'quickfix'
            cclose
            return
        endif
    endfor

    copen
endfunction

nnoremap <silent> <leader>q :call QuickFix_toggle()<cr>
nnoremap <leader>Q :cc<cr>
nnoremap <leader>j :cnext<cr>
nnoremap <leader>k :cprev<cr>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Spell checking
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

map <leader>de :setlocal spell spelllang=de_de<CR>
map <leader>en :setlocal spell spelllang=en_gb<CR>
map <leader>x  :setlocal nospell<CR>
" zg "add word under cursor to word list
" zG "add word under cursor to internal word list
" z= " For the word under/after the cursor suggest correctly spelled words.  This also works to find alternatives


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Window handling
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr><C-w>_
nnoremap <silent> <C-k> :TmuxNavigateUp<cr><C-w>_
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>
nnoremap <silent> __ <C-w>_

function! OpenCurrentAsNewTab()
    let l:currentPos = getcurpos()
    tabedit %
    call setpos(".", l:currentPos)
endfunction
nnoremap te :call OpenCurrentAsNewTab()<CR>   " open current file in new tab
nnoremap td :tabclose<CR>    " close current tab


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Integrations with external programs
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

nnoremap <leader>da :Dash<CR>
nnoremap <leader>a :Ack! 


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Some neat tricks
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

" With the following mapping you can press Q every time you alter something in
" a paragraph, and the line-breaks get sorted out. The default meaning of
" Q is not useful, and anyway gQ makes a better job of it.
vnoremap Q gq
nnoremap Q gqap


" open current line on github ... based on
" http://felixge.de/2013/08/08/vim-trick-open-current-line-on-github.html
nnoremap <leader>gh :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs open<CR><CR>


" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>lv :so $MYVIMRC<CR>


" strip all trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" display cursor position's in hierarchy of a yaml file
" taken from https://vi.stackexchange.com/questions/13515/how-to-show-the-current-location-in-a-yaml-hierarchy
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function! YAMLTree()
    let l:list = []
    let l:cur = getcurpos()[1]
    " Retrieve the current line indentation
    let l:indent = indent(l:cur) + 1
    " Loop from the cursor position to the top of the file
    for l:n in reverse(range(1, l:cur))
        let l:i = indent(l:n)
        let l:line = getline(l:n)
        let l:key = substitute(l:line, '^\s*\(\<\w\+\>\):.*', "\\1", '')
        " If the indentation decreased and the pattern matched
        if (l:i < l:indent && l:key !=# l:line)
            let l:list = add(l:list, l:key)
            let l:indent = l:i
        endif
    endfor
    let l:list = reverse(l:list)
    echo join(l:list, '.')
endfunction

nnoremap <leader>hi :call YAMLTree()<CR>
